from tgbot.loader import dp, bot
from aiogram.dispatcher import FSMContext
from aiogram import types
from tgbot.buttons.user_buttons import menu_buttons, setting_buttons, alarm_buttons
from tgbot.parser.parsing import get_html, get_data, get_html_ua, get_html_us
from tgbot.db.db_logging import update_user_info, get_userx
from tgbot.buttons.inline_user import weather_day_choose, choose_lang
from tgbot.locales.uk.strings import _

from datetime import datetime


@dp.message_handler(text='/start', state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    get_user = get_userx(user_id=message.from_user.id)
    lang = get_user['lang']

    await message.answer(_('–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É –≤ –Ω—É–∂–Ω–æ–µ –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è', lang))
    await message.answer(_('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', lang), reply_markup=menu_buttons(message.from_user.id))
    await state.set_state('wait_city')

@dp.message_handler(text=['üèô–ì–æ—Ä–æ–¥', 'üèô–ú—ñ—Å—Ç–æ', 'üèôCity'], state="*")
async def choose_city(message: types.Message, state: FSMContext):
    get_user = get_userx(user_id=message.from_user.id)
    lang = get_user['lang']

    await message.answer(_('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞', lang), reply_markup=menu_buttons(message.from_user.id))
    await state.set_state('wait_city')



@dp.message_handler(content_types='text', state="wait_city")
async def show_city(message: types.Message, state: FSMContext):

    get_user = get_userx(user_id=message.from_user.id)
    lang = get_user['lang']


    try:
        if lang == 'ru':
            html = get_html(get_user['city'])
            data = get_data(html)
        elif lang == 'uk':
            html = get_html_ua(get_user['city'])
            data = get_data(html)
        else:
            html = get_html_us(get_user['city'])
            data = get_data(html)


        if data[7] == '-':
            rain = _('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', lang)
        else:
            rain = data[7] + '%'

        msg_for_user = 'üèô<strong>' + data[0] + '</strong>\n' + datetime.now().strftime('%d-%m-%Y') + _(
            '\n\n<b>–¢–µ–∫—É—â–∞—è</b>', lang) + '' \
                                          '\nüå°' + data[1] + _('C (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ', lang) + data[
                           2] + 'C)\n' \
                                '<u>' + data[3] + _('</u>\n\nüåÄ–î–∞–≤–ª–µ–Ω–∏–µ: <u>', lang) + data[4] + ' –º–º —Ä—Ç.—Å—Ç.</u>\n' \
                                                                                                '' + _(
            'üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: <u>', lang) + data[5] + '%</u>\n' \
                                                 '' + _('üí®–í–µ—Ç–µ—Ä: <u>', lang) + data[6] + _(
            '</u>\n‚òîÔ∏è–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: <u>', lang) + rain + _('</u>\n\n\n<b>–î–Ω–µ–≤–Ω–∞—è</b>\n', lang) + '' \
                                                                                                       '<u>' + data[
                           8] + '</u> ' + data[16] + 'C' + '\n' \
                                                           '<u>' + data[9] + '</u> ' + data[17] + 'C' + '\n' \
                                                                                                        '<u>' + data[
                           10] + '</u> ' + data[18] + 'C' + '\n' \
                                                            '<u>' + data[11] + '</u> ' + data[19] + 'C' + '\n\n' \
                                                                                                          '<u>' + data[
                           12] + '</u> ' + data[20] + 'C' + '\n' \
                                                            '<u>' + data[13] + '</u> ' + data[21] + 'C' + '\n' \
                                                                                                          '<u>' + data[
                           14] + '</u> ' + data[22] + 'C' + '\n' \
                                                            '<u>' + data[15] + '</u> ' + data[23] + 'C' + '\n'


        await message.answer(msg_for_user, reply_markup=weather_day_choose(message.text, message.from_user.id))
        update_user_info(message.from_user.id, city=message.text)
        update_user_info(message.from_user.id, evry_day=1)
        await state.finish()


    except AttributeError as e:
        await message.answer(_('–ü–æ—Ö–æ–∂–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑', lang))

@dp.message_handler(text=['‚õÖÔ∏è–ü–æ–≥–æ–¥–∞', '‚õÖÔ∏èWeather'], state="*")
async def show_weather(message: types.Message, state: FSMContext):



    get_user = get_userx(user_id=message.from_user.id)
    lang = get_user['lang']

    try:

        if lang == 'ru':
            html = get_html(get_user['city'])
            data = get_data(html)
        elif lang == 'uk':
            html = get_html_ua(get_user['city'])
            data = get_data(html)
        else:
            html = get_html_us(get_user['city'])
            data = get_data(html)
        if data[7] == '-':
            rain = _('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', lang)
        else:
            rain = data[7] + '%'


        msg_for_user = 'üèô<strong>' + data[0] + '</strong>\n' + datetime.now().strftime('%d-%m-%Y') + _('\n\n<b>–¢–µ–∫—É—â–∞—è</b>', lang) + '' \
                               '\nüå°' + data[1] + _('C (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ', lang) + data[
                               2] + 'C)\n' \
                               '<u>' + data[3] + _('</u>\n\nüåÄ–î–∞–≤–ª–µ–Ω–∏–µ: <u>', lang) + data[4] + ' –º–º —Ä—Ç.—Å—Ç.</u>\n' \
                               '' + _('üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: <u>', lang) + data[5] + '%</u>\n' \
                               '' + _('üí®–í–µ—Ç–µ—Ä: <u>', lang) + data[6] + _('</u>\n‚òîÔ∏è–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: <u>', lang) + rain + _('</u>\n\n\n<b>–î–Ω–µ–≤–Ω–∞—è</b>\n', lang) + '' \
                                '<u>' + data[8] + '</u> ' + data[16] + 'C'   + '\n' \
                                '<u>' + data[9] + '</u> ' + data[17] + 'C'   + '\n' \
                                '<u>' + data[10] + '</u> ' + data[18] + 'C'   + '\n' \
                                '<u>' + data[11] + '</u> ' + data[19] + 'C'   + '\n\n' \
                                '<u>' + data[12] + '</u> ' + data[20] + 'C'   + '\n' \
                                '<u>' + data[13] + '</u> ' + data[21] + 'C'   + '\n' \
                                '<u>' + data[14] + '</u> ' + data[22] + 'C'   + '\n' \
                                '<u>' + data[15] + '</u> ' + data[23] + 'C'   + '\n'

        await message.answer(msg_for_user, reply_markup=weather_day_choose(get_user['city'], message.from_user.id))
        await state.finish()

    except AttributeError as e:
        await message.answer(_('–ü–æ—Ö–æ–∂–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑', lang))


def message_user(user_id):


    get_user = get_userx(user_id=user_id)
    lang = get_user['lang']


    try:
        msg_for_user = ''

        if lang == 'ru':
            html = get_html(get_user['city'])
            data = get_data(html)
        elif lang == 'uk':
            html = get_html_ua(get_user['city'])
            data = get_data(html)
        else:
            html = get_html_us(get_user['city'])
            data = get_data(html)

        if data[7] == '-':
            rain = _('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', lang)
        else:
            rain = data[7] + '%'

        msg_for_user = 'üèô<strong>' + data[0] + '</strong>\n' + datetime.now().strftime('%d-%m-%Y') + _(
            '\n\n<b>–¢–µ–∫—É—â–∞—è</b>', lang) + '' \
                                          '\nüå°' + data[1] + _('C (–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ', lang) + data[
                           2] + 'C)\n' \
                                '<u>' + data[3] + _('</u>\n\nüåÄ–î–∞–≤–ª–µ–Ω–∏–µ: <u>', lang) + data[4] + ' –º–º —Ä—Ç.—Å—Ç.</u>\n' \
                                                                                                '' + _(
            'üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: <u>', lang) + data[5] + '%</u>\n' \
                                                 '' + _('üí®–í–µ—Ç–µ—Ä: <u>', lang) + data[6] + _(
            '</u>\n‚òîÔ∏è–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: <u>', lang) + rain + _('</u>\n\n\n<b>–î–Ω–µ–≤–Ω–∞—è</b>\n', lang) + '' \
                                                                                                       '<u>' + data[
                           8] + '</u> ' + data[16] + 'C' + '\n' \
                                                           '<u>' + data[9] + '</u> ' + data[17] + 'C' + '\n' \
                                                                                                        '<u>' + data[
                           10] + '</u> ' + data[18] + 'C' + '\n' \
                                                            '<u>' + data[11] + '</u> ' + data[19] + 'C' + '\n\n' \
                                                                                                          '<u>' + data[
                           12] + '</u> ' + data[20] + 'C' + '\n' \
                                                            '<u>' + data[13] + '</u> ' + data[21] + 'C' + '\n' \
                                                                                                          '<u>' + data[
                           14] + '</u> ' + data[22] + 'C' + '\n' \
                                                            '<u>' + data[15] + '</u> ' + data[23] + 'C' + '\n'

        return msg_for_user

    except AttributeError as e:
        pass




@dp.message_handler(text=['‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '‚öôÔ∏è–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', '‚öôÔ∏èSettings'], state="*")
async def settings(message: types.Message, state: FSMContext):
    await state.finish()
    get_user = get_userx(user_id=message.from_user.id)
    lang = get_user['lang']

    await message.answer(_('<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>', lang), reply_markup=setting_buttons(message.from_user.id))



@dp.message_handler(text=['üì©–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'üì©–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', 'üì©Message'], state="*")
async def alarms(message: types.Message, state: FSMContext):
    await state.finish()
    get_user = get_userx(user_id=message.from_user.id)
    lang = get_user['lang']


    await message.answer(_('–£–∫–∞–∂–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ', lang), reply_markup=alarm_buttons(message.from_user.id))



@dp.message_handler(text=['‚¨ÖÔ∏è–ù–∞–∑–∞–¥', '–ì–ª–∞–≤–Ω–∞—è', '–ì–æ–ª–æ–≤–Ω–∞', '‚¨ÖÔ∏èBack', 'Menu'], state="*")
async def back(message: types.Message, state: FSMContext):
    await state.finish()
    get_user = get_userx(user_id=message.from_user.id)
    lang = get_user['lang']

    await message.answer(_('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', lang), reply_markup=menu_buttons(message.from_user.id))

@dp.message_handler(text=['üåê–Ø–∑—ã–∫', 'üåê–ú–æ–≤–∞', 'üåêLanguage'], state="*")
async def change_lang(message: types.Message, state: FSMContext):
    await state.finish()

    get_user = get_userx(user_id=message.from_user.id)
    lang = get_user['lang']

    if lang == 'ru':
        ico = _('–†—É—Å—Å–∫–∏–πüá∑üá∫', lang)
    elif lang == 'uk':
        ico = _('–£–∫—Ä–∞–∏–Ω—Å–∫–∏–πüá∫üá¶', lang)
    else:
        ico = _('–ê–Ω–≥–ª–∏–π—Å–∫–∏–πüá¨üáß', lang)

    await message.answer(_('–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: ', lang) + ico + _('\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: ', lang), reply_markup=choose_lang())


@dp.callback_query_handler(text_startswith='choose_language', state="*")
async def language_choosen(query: types.CallbackQuery, state: FSMContext):
    await state.finish()

    lang = query.data.split(":")[1]

    update_user_info(query.from_user.id, lang=lang)

    if lang == 'ru':
        mova = 'üá∑üá∫'
    elif lang == 'uk':
        mova = 'üá∫üá¶'
    else:
        mova = 'üá¨üáß'

    await query.message.delete()
    await query.message.answer(_('–í–∞—à —è–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ', lang) + mova, reply_markup=menu_buttons(query.from_user.id))






